* Redesign the VFS stuff to be less braindead
  - dict based path cache
     - templates (/config)
     - Spillover files (mmap)
     - Package files (mmap)
     - Passthrough (local fs)

* Improve signal handler (signals.c) so that ALWAYS unmount

* Ensure we use BlockHeap allocator anywhere possible

* Thread-safety and more threading

* Finish the shell

* Finish the profiling code

* Cleanup and unify string handling code

* Merge unix.c support.c and host.c

* Loadable modules (eventually)


* Standardize API and document stuff better (lol)

* Make a script to repackage distro packages to .tar

* Maybe a bit of buffering on logs so that very early
  - startup messages can still be printed to the log
  - and not just stdout/stderr which may not exist





---------

startup
scan pkgdir & add all packages and files to db

---------------
These are some old notes from NetOS project
----
--- These tools are built on Linux but SHALL be portable to NeOS ---
--- Try to keep this in mind while coding ---
distro-tools: Tools specific to NetOS
fs-acl: Access Control List implementation on FUSE
   - Converts .access files to bytecode for firewall
   - Uses dlsym and linux debugging mechanisms to intercept
     functions. (Dynamic patching)
fs-etc: Configuration storage and templating
fs-pkg: Package file system
   - Add deb/rpm support?
libnoui: Library for communication with Node.js NetOS backend
   - Interfaces with the server-side of the desktop, redirecting msgs
makepkg: Makes packages for pkgrepo and packmana
pkgrepo: Package repository builder
   - Manage building of packages from source.
   - Maintain repository files on a web server
netsound: Network Audio over multicast with support for multihost speakers
   - Allows surround sound using a group of machines with only 2 chan audio
   - Supports remote sound on NetOSui clients (WebRTC)
App.NetOSuiServer: Provides backend (server side) for NetOS UI
App.PackMan: PACKage MANager
   - Graphical interface to downloading and managing packages
App.VideoOctopus: Grab video from V4L2 and make it available on a socket
   - sysv SHM
Web.NetOSui: NetOS UI provides a graphical interface for NetOS in a browser

--------
spkg: Source Packages
---------------

Work on a library (LD_PRELOAD) method.
        * Needs read-only package database and a daemon to fill it
        * Needs way to disable inotify, etc
        * Needs way to disable fuse build
        * Add a pass-through mode
                - Try pkgdb
                        [noent] try spillover
                                [noent] try real fs
        * Add in-place decompression (at least libz)
                - To file
                - To buffer

-----------
Create a  templating library common to these projects
-- %{key} returns the key from the global dictionary
-- #{key,value} sets a key in the global dictionary
-- #{key,} unsets a key in the global dictionary
---- #!{} means only if unset
---- #@{} means only if set

create a common console library, allowing adding an interactive shell
for each of the components of NetOS.
