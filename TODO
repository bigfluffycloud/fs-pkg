--- Redesign database to be a generic storage system
	- Flat file
	- sqlite (rewrite!)
	- nosqlite (ext/nosqlite)
	- in-memory (dict based?)

--- Add FreeBSD support

* jail stuff
   CAP_SYS_CHROOT Parent, CAP_NET_BIND_SERVICE both (if client needs)

!!! Thread safety stuff. Add locks to (most) structures. !!!
	* Move as much as possible to thread/module private (static)
	* Make all the BlockHeap's totally thread-private

!!! Only allow API messages between threads !!!
	* Inter-thread IPC mechanism (api.[ch])

* Figure out how we're going to work out i18n strings
  - Add dict_printf() to allow printing based on a dict
    ex:
   	 dict_printf(dict, "Path %{path.mountpoint:s} is not writable\n");
    or
    	dict_snprintf(dict, buf, sizeof(buf), "Path %{path.mountpoint:s} is not writable");

* Fix inotify to remove packages & files if deleted

+++ Work on the debugger & profiling stuff +++

* Make sure EVERYTHING is using BlockHeap allocator
  - Can we replace malloc()/free() with wrappers which log?

When a package is added
-----------------------
* Scan archive, adding list of it's files/permissions/etc to the database

When a file is requested
------------------------
* look up what archive owns it.
	Resolver order:
		Overlays (fs-etc templates, etc) as readonly
		$jail/pkg/*.spill
		$jail/pkg/*.pkg
		$top/pkg/*.pkg

* check the cache to see if it's cached in memory or on disk
	- Yes? Provide COW mapped file to FUSE
	- No? Extract the file to cache and provide COW mapped file to FUSE
